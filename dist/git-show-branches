#!/usr/bin/env bash

set -o errexit  # Exit script when a command exits with non-zero status.
set -o errtrace # Exit on error inside any functions or sub-shells.
set -o nounset  # Exit script on use of an undefined variable.
set -o pipefail # Return exit status of the last command in the pipe that exited with a non-zero exit code



readonly COLOR_DIM="$(tput dim)"
readonly COLOR_GREEN="$(tput setaf 2)"
readonly COLOR_RED="$(tput setaf 1)"
readonly COLOR_RESET="$(tput sgr0)"
readonly COLOR_YELLOW="$(tput setaf 3)"


readonly EX_OK=0
readonly EX_NOT_ENOUGH_PARAMETERS=66
readonly EX_DIRECTORY_NOT_EXISTS=67
readonly EX_NOT_A_DIRECTORY=68


error() {
echo "${COLOR_RED}ERROR${COLOR_RESET} ${1}" >&2
exit "${2}"
}


validate_directory() {
if [[ ! -e "${1}" ]];then
error "The given directory '${1}' does not exist" "${EX_DIRECTORY_NOT_EXISTS}"
elif [[ ! -d "${1}" ]];then
error "The given directory '${1}' is not a directory" "${EX_NOT_A_DIRECTORY}"
fi
}


git_show_branch() {

validate_directory "${1}"

local -r sDirectory=$(unset CDPATH && cd "${1}"/ && pwd -P )
local -r sRootRepoHead="${2:-}"

pushd "${sDirectory}" > /dev/null

sRepo=$(basename "${sDirectory}")
sRepoHead="$(git rev-list --parents HEAD 2> /dev/null | tail -1 || echo '')"

if [[ "${sRootRepoHead}" = "${sRepoHead}" || "${sRepoHead}" = "" ]];then
sBranch="${COLOR_DIM}(not a git repo)${COLOR_RESET}"
else
sBranch=$(git symbolic-ref --quiet --short -q HEAD 2>/dev/null)

if [[ "${sBranch}" = 'master' ]];then
sBranch="${COLOR_GREEN}${sBranch}${COLOR_RESET}"
else
sBranch="${COLOR_YELLOW}${sBranch}${COLOR_RESET}"
fi
fi

popd > /dev/null

printf '%-24s: %s\n' "${sRepo}" "${sBranch}"

return "${EX_OK}"
}


git_show_branches() {

local sRootRepoHead sDirectory

if [[ "$#" -lt 1 ]];then
error 'One parameter expected' "${EX_NOT_ENOUGH_PARAMETERS}"
else
validate_directory "${1}"

local -r sRootDirectory=$(unset CDPATH && cd "${1}" && pwd -P )

pushd "${sRootDirectory}" > /dev/null
readonly sRootRepoHead="$(git rev-list --parents HEAD 2> /dev/null | tail -1 || echo '')"
popd > /dev/null

for sDirectory in ${sRootDirectory}/*/;do
git_show_branch "${sDirectory}" "${sRootRepoHead}"
done
fi

return "${EX_OK}"
}

if [[ ${BASH_SOURCE[0]} != $0 ]]; then
export -f git_show_branches
else
git_show_branches "${@:-}"
exit ${?}
fi

# EOF
