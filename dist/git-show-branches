#!/usr/bin/env bash

set -o errexit  # Exit script when a command exits with non-zero status.
set -o errtrace # Exit on error inside any functions or sub-shells.
set -o nounset  # Exit script on use of an undefined variable.
set -o pipefail # Return exit status of the last command in the pipe that exited with a non-zero exit code

# Avoid `tput` to mess up output in debug mode (bash -x)
if [[ "$-" == *x* ]]; then
    bRestoreX=true
    set +x
fi

# ==============================================================================
# Foreground colors
# ------------------------------------------------------------------------------
: readonly "${COLOR_GREEN:=$(tput setaf 2)}"
: readonly "${COLOR_RED:=$(tput setaf 1)}"
: readonly "${COLOR_WHITE:=$(tput setaf 7)}"
: readonly "${COLOR_YELLOW:=$(tput setaf 3)}"
# ==============================================================================

# ==============================================================================
# Text attributes
# ------------------------------------------------------------------------------
: readonly "${RESET_TEXT:=$(tput sgr0)}"      # turn off all attributes
# ------------------------------------------------------------------------------
: readonly "${TEXT_DIM:=$(tput dim)}"         # turn on half-bright mode
# ==============================================================================

if [[ "${bRestoreX:=false}" == true ]]; then
    bRestoreX=false
    set -x
fi

: readonly -i "${EX_OK:=0}"
: readonly -i "${EX_NOT_ENOUGH_PARAMETERS:=66}"
: readonly -i "${EX_DIRECTORY_NOT_EXISTS:=67}"
: readonly -i "${EX_NOT_A_DIRECTORY:=68}"
: readonly -i "${EX_ERROR_UPDATING:=69}"

# shellcheck disable=SC2154
: declare "${g_bVerbose:=false}"
# shellcheck disable=SC2154
: declare -a "${g_aParams:=}"

error() {
    echo "${COLOR_RED}ERROR${RESET_TEXT} ${1}" >&2
    exit "${2}"
}

handleParams() {

    while [[ "$#" -ne 0 ]]; do
        case "$1" in
            #@TODO: -h|--help)
            # @TODO: --no-color)

            -v|--verbose)
                export g_bVerbose=true
            ;;

            *)
                # Regular parameter
                g_aParams+=("$1")
            ;;
        esac
        shift
    done
}

validate_directory() {
    if [[ ! -e "${1}" ]];then
        error "The given directory '${1}' does not exist" "${EX_DIRECTORY_NOT_EXISTS}"
    elif [[ ! -d "${1}" ]];then
        error "The given directory '${1}' is not a directory" "${EX_NOT_A_DIRECTORY}"
    fi
}


git_show_branch() {

    declare g_aParams=()

    local sBranch sDirectory sRepo sRepoHead sRootRepoHead sStatus

    git_fetch() {
        local -i iResult
        local sResult

        iResult=0

        sResult=$(git fetch -p 2>&1) || iResult=$?

        if [[ ${iResult} != 0 ]];then
            error "${sResult}" "${EX_ERROR_UPDATING}"
        fi
    }

    handleParams "${@}"

    validate_directory "${g_aParams[0]}"

    readonly sDirectory=$(unset CDPATH && cd "${g_aParams[0]}"/ && pwd -P )
    readonly sRootRepoHead="${g_aParams[1]:=}"

    pushd "${sDirectory}" > /dev/null

    readonly sRepo=$(basename "${sDirectory}")
    readonly sRepoHead="$(git rev-list --parents HEAD 2> /dev/null | tail -1 || echo '')"

    sStatus=''

    if [[ "${sRootRepoHead}" = "${sRepoHead}" || "${sRepoHead}" = "" ]];then
        readonly sBranch="${TEXT_DIM}(not a git repo)${RESET_TEXT}"
    else

        sBranch=$(git symbolic-ref --quiet --short -q HEAD 2>/dev/null)

        if [[ "${sBranch}" = 'master' ]];then
            readonly sBranch="${COLOR_GREEN}${sBranch}${RESET_TEXT}"
        else
            readonly sBranch="${COLOR_YELLOW}${sBranch}${RESET_TEXT}"
        fi

        if [[ ${g_bVerbose} = true ]];then
            git_fetch
        fi

        readonly sStatus=$(git-show-status)
    fi

    popd > /dev/null

    printf '%-24s: %s %s\n' "${sRepo}" "${sBranch}" "${sStatus}"

    return "${EX_OK}"
}


git_show_branches() {

    declare g_aParams=()

    local sDirectory sRootDirectory sRootRepoHead

    handleParams "${@}"

    if [[ "${#g_aParams[@]}" -lt 1 ]];then
        error 'Missing required parameter: <directory>' "${EX_NOT_ENOUGH_PARAMETERS}"
    else

        validate_directory "${g_aParams[0]}"

        readonly sRootDirectory=$(unset CDPATH && cd "${g_aParams[0]}" && pwd -P )

        pushd "${sRootDirectory}" > /dev/null
        readonly sRootRepoHead="$(git rev-list --parents HEAD 2> /dev/null | tail -1 || echo '')"
        popd > /dev/null

        for sDirectory in ${sRootDirectory}/*/;do
            git_show_branch "${sDirectory}" "${sRootRepoHead}"
        done
    fi

    return "${EX_OK}"
}

git-show-status() {

    local sGitStatus sStatus sUnpushed

    readonly sGitStatus=$(git status 2> /dev/null)
    readonly sUnpushed=$(git log --branches --not --remotes --decorate)

    sStatus=''

    if [[ "${sUnpushed}" != '' ]];then
        sStatus="${sStatus}${COLOR_YELLOW}unpushed commits${COLOR_WHITE}/"
    fi

    if [[ ${g_bVerbose} = true ]];then
        if [[ -z "${sGitStatus##*Your branch is up-to-date with*}" ]] ;then
            sStatus="${sStatus}${COLOR_GREEN}up-to-date${COLOR_WHITE}/"
        else
            sStatus="${sStatus}${COLOR_YELLOW}incoming changes${COLOR_WHITE}/"
        fi
    fi

    if [[ -z "${sGitStatus##*working directory clean*}" && ${g_bVerbose} = true ]] ;then
        sStatus="${sStatus}${COLOR_GREEN}clean${COLOR_WHITE}/"
    fi

    if [[ ! -z "${sGitStatus##*working directory clean*}" && ${g_bVerbose} = false ]];then
        sStatus="${sStatus}${COLOR_YELLOW}not clean${COLOR_WHITE}/"
    fi

    if [[ ! -z "${sGitStatus##*working directory clean*}" && ${g_bVerbose} = true ]];then

        if [ -z "${sGitStatus##*Changes not staged for commit:*}" ] ;then
            sStatus="${sStatus}${COLOR_YELLOW}unstaged changes${COLOR_WHITE}/"
        fi

        if [ -z "${sGitStatus##*Changes to be committed:*}" ] ;then
            sStatus="${sStatus}${COLOR_YELLOW}staged changes${COLOR_WHITE}/"
        fi

        if [ -z "${sGitStatus##*Untracked files:*}" ] ;then
            sStatus="${sStatus}${COLOR_YELLOW}untracked files${COLOR_WHITE}/"
        fi
    fi

    if [[ "${sStatus}" != '' ]];then
        # Remove trailing slash `/`
        sStatus="${sStatus: : -1}"

        sStatus="${TEXT_DIM}${COLOR_WHITE}(${sStatus}${COLOR_WHITE})${RESET_TEXT}"
    fi

    echo "${sStatus}"

}

if [[ ${BASH_SOURCE[0]} != $0 ]]; then
    export -f git_show_branches
else
    git_show_branches "${@:-}"
    exit ${?}
fi

# EOF
